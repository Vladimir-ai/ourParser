%import common.WS
%import common.CPP_COMMENT
%import common.C_COMMENT
%import common.CNAME -> IDENT
%import common.SIGNED_FLOAT -> FLOAT_NUM
%import common.SIGNED_INT -> INT_NUM


%ignore C_COMMENT | WS | CPP_COMMENT

IF: "if"
FOR: "for"
RETURN: "return"
keyword: IF | FOR | RETURN

type_ident:  IDENT

int_num: INT_NUM
float_num: FLOAT_NUM
num: INT_NUM
   | FLOAT_NUM

ident: type_ident? IDENT

?group_expr: num
    | ident
    | "(" expr ")"

?mult: group_expr
    | mult "*" group_expr -> mul
    | mult "/" group_expr -> div
    | mult "%" group_expr -> mod

?add: mult
    | add "+" mult -> add
    | add "-" mult -> sub

?comparene: add
    | comparene ">" add -> gt
    | comparene ">=" add -> ge
    | comparene "<" add -> lt
    | comparene "<=" add -> le

?comparee: comparene
    | comparee "==" comparene -> eq
    | comparee "!=" comparene -> ne

?logical_and: comparee
    | logical_and "&&" comparee -> and

?logical_or: logical_and
    | logical_or "||" logical_and -> or

expr: logical_or

assign: ident "=" expr ";"?

simple_stmt: assign

block: "{" stmt_list "}"

if: "if" "(" expr ")" stmt ("else" stmt)?

while: "while" "(" expr ")" stmt

comma_sep_stmts: simple_stmt ("," simple_stmt)*

comma_sep_exprs: expr ("," expr)*

for_expr: comma_sep_stmts ";" comma_sep_exprs ";" comma_sep_stmts

for: "for" "(" for_expr ")" stmt

stmt: simple_stmt | if | while | for | block

stmt_list: stmt*

start:  stmt_list


