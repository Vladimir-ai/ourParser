%import common.NUMBER
%import common.DIGIT
%import common.ESCAPED_STRING
%import common.CNAME
%import common.NEWLINE
%import common.WS
%import common.C_COMMENT
%import common.CPP_COMMENT
%import common.LETTER


%ignore WS
%ignore CPP_COMMENT
%ignore C_COMMENT

num: NUMBER  -> literal
str: ESCAPED_STRING  -> literal
ident: CNAME
array: ident "[" expr "]"

ADD:     "+"
SUB:     "-"
MUL:     "*"
DIV:     "/"
AND:     "&&"
OR:      "||"
BIT_AND: "&"
BIT_OR:  "|"
GE:      ">="
LE:      "<="
NEQUALS: "!="
EQUALS:  "=="
GT:      ">"
LT:      "<"


call:  ident "(" ( expr ( "," expr )* )? ")"

?group: num | str | array
    | ident
    | call
    | "(" expr ")"

?mult: group
    | mult ( MUL | DIV ) group  -> bin_op

?add: mult
    | add ( ADD | SUB ) mult  -> bin_op

?compare1: add
    | add ( GT | LT | GE | LE ) add  -> bin_op

?compare2: compare1
    | compare1 ( EQUALS | NEQUALS ) compare1  -> bin_op

?logical_and: compare2
    | logical_and AND compare2  -> bin_op

?logical_or: logical_and
    | logical_or OR logical_and  -> bin_op

?expr: logical_or

?var_decl_inner: ident
    | ident "=" expr  -> assign

array_declaration: ident ident "[" expr "]"

vars_decl: ident var_decl_inner ( "," var_decl_inner )*

?simple_stmt: ident "=" expr  -> assign
    | call

?for_stmt_list: vars_decl
    | ( simple_stmt ( "," simple_stmt )* )?  -> stmt_list
?for_cond: expr
    |   -> stmt_list
?body: stmt
    | ";"  -> stmt_list

argument: ident ident

argument_list: (argument ( "," argument )*)?

?stmt: ";"
    | "while" "(" expr ")" body -> while
    | vars_decl ";"
    | "if" "(" expr ")" body -> if
    | "if" "(" expr ")" body "else" body  -> if
    | "for" "(" for_stmt_list ";" for_cond ";" for_stmt_list ")" body  -> for
    | "{" stmt_list "}"
    | simple_stmt ";"
    | array_declaration ";"
    | array
    | ident ident "(" argument_list ")" "{" stmt_list "}"-> function
    | "return" expr ";" -> return

stmt_list: ( stmt ";"* )*

?prog: stmt_list

?start: prog

